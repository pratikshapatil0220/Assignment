import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from scipy.integrate import simps
from scipy.spatial.distance import euclidean

class MobiusStrip:
    def __init__(self, R, w, n):
        self.R = R      # Radius
        self.w = w      # Width
        self.n = n      # Resolution
        self.u = np.linspace(0, 2 * np.pi, n)
        self.v = np.linspace(-w / 2, w / 2, n)
        self.U, self.V = np.meshgrid(self.u, self.v)
        self.X, self.Y, self.Z = self.compute_coordinates()

    def compute_coordinates(self):
        """
        Compute x(u,v), y(u,v), z(u,v)
        """
        u = self.U
        v = self.V
        x = (self.R + v * np.cos(u / 2)) * np.cos(u)
        y = (self.R + v * np.cos(u / 2)) * np.sin(u)
        z = v * np.sin(u / 2)
        return x, y, z

    def surface_area(self):
        """
        Approximate surface area using numerical integration (Simpson's Rule)
        """
        dxdu = np.gradient(self.X, self.u, axis=1)
        dxdv = np.gradient(self.X, self.v, axis=0)
        dydu = np.gradient(self.Y, self.u, axis=1)
        dydv = np.gradient(self.Y, self.v, axis=0)
        dzdu = np.gradient(self.Z, self.u, axis=1)
        dzdv = np.gradient(self.Z, self.v, axis=0)

        # Cross product magnitude of partial derivatives gives local area element
        cross = np.sqrt(
            (dydu * dzdv - dzdu * dydv)**2 +
            (dzdu * dxdv - dxdu * dzdv)**2 +
            (dxdu * dydv - dydu * dxdv)**2
        )

        # Integrate over u and v
        area = simps(simps(cross, self.v), self.u)
        return area

    def edge_length(self):
        """
        Compute length of boundary edge by approximating curve along v = w/2
        """
        upper_edge = np.array([
            self.X[-1, :],
            self.Y[-1, :],
            self.Z[-1, :]
        ]).T

        length = 0.0
        for i in range(1, len(upper_edge)):
            length += euclidean(upper_edge[i - 1], upper_edge[i])
        return length

    def plot(self):
        """
        3D plot of the Möbius strip
        """
        fig = plt.figure(figsize=(10, 7))
        ax = fig.add_subplot(111, projection='3d')
        ax.plot_surface(self.X, self.Y, self.Z, cmap='viridis', alpha=0.8)
        ax.set_title("Möbius Strip")
        plt.show()

# Example Usage
if __name__ == "__main__":
    mobius = MobiusStrip(R=5, w=1, n=200)
    print("Surface Area:", mobius.surface_area())
    print("Edge Length:", mobius.edge_length())
    mobius.plot()

